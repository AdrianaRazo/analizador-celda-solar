"""
Analizador de Celdas Solares - An√°lisis de Curvas I-V y P-V
===========================================================

Este programa analiza datos experimentales de corriente y voltaje de celdas solares,
calculando par√°metros caracter√≠sticos y generando gr√°ficas de an√°lisis.

Creado por: Adriana Razo De Le√≥n
Proyecto: Celdas Solares
Versi√≥n: 2.0
Fecha: 2025

Funcionalidades:
- An√°lisis de curvas I-V y P-V
- C√°lculo de par√°metros caracter√≠sticos (Isc, Voc, Pmax, FF, Œ∑)
- Generaci√≥n de gr√°ficas profesionales
- Exportaci√≥n de resultados a CSV
- Configuraci√≥n f√°cil de datos de entrada

Uso:
    python graph_I_V.py

Dependencias:
    - numpy: C√°lculos num√©ricos
    - matplotlib: Generaci√≥n de gr√°ficas
    - scipy: Interpolaci√≥n de datos
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
import csv
import config
import os
import pandas as pd
from datetime import datetime


def analiza_celda(voltage, current, irradiancia=None, area=None, 
                  titulo="An√°lisis de Celda Solar", mostrar_eficiencia=True, 
                  guardar_imagen=True):
    """
    Analiza una celda solar a partir de datos de corriente y voltaje.
    
    Par√°metros:
    -----------
    voltage : list o array
        Valores de voltaje medidos (V)
    current : list o array  
        Valores de corriente medidos (A)
    irradiancia : float, opcional
        Irradiancia solar en W/m¬≤ (default: None)
    area : float, opcional
        √Årea de la celda en m¬≤ (default: None)
    titulo : str, opcional
        T√≠tulo para las gr√°ficas (default: "An√°lisis de Celda Solar")
    mostrar_eficiencia : bool, opcional
        Mostrar eficiencia en la gr√°fica I-V (default: True)
    guardar_imagen : bool, opcional
        Guardar gr√°ficas como archivo PNG (default: True)
    
    Retorna:
    --------
    dict : Diccionario con todos los par√°metros calculados
    """
    if len(voltage) != len(current):
        raise ValueError("Los arrays de voltaje y corriente deben tener la misma longitud")
    if len(voltage) < 3:
        raise ValueError("Se requieren al menos 3 puntos de medici√≥n")
    
    # Convertir a arrays NumPy
    V = np.array(voltage, dtype=float)
    I = np.array(current, dtype=float)
    
    print("=" * 50)
    print(f"üîã {titulo}")
    print("=" * 50)
    print(f"üìä Analizando {len(V)} puntos de medici√≥n...")
    print(f"üìÖ Fecha de an√°lisis: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    # C√°lculo de Isc: punto donde V es m√°s cercano a 0
    Isc = I[np.argmin(np.abs(V))]
    
    # C√°lculo de Voc: Interpolaci√≥n para obtener V cuando I = 0.
    try:
        f_iv = interpolate.interp1d(I, V, kind='linear', fill_value="extrapolate")
        Voc = float(f_iv(0.0))
    except ValueError:
        Voc = V[I > 0][-1] if len(V[I > 0]) > 0 else V[-1]
    
    # C√°lculo de potencia y puntos de m√°xima potencia
    P = V * I
    idx_max = np.argmax(P)
    Vmp, Imp, Pmp = V[idx_max], I[idx_max], P[idx_max]
    
    # Calcular Fill Factor
    FF = Pmp / (Isc * Voc) if (Isc > 0 and Voc > 0) else 0
    if FF == 0:
        print("‚ö†Ô∏è  Advertencia: No se puede calcular FF (Isc o Voc es cero)")
    
    # Calcular eficiencia si se proporcionan irradiancia y √°rea
    eta = None
    if irradiancia is not None and area is not None and irradiancia > 0 and area > 0:
        Pin = irradiancia * area  # Potencia de entrada
        eta = Pmp / Pin if Pin > 0 else 0
    
    # Mostrar resultados
    print("üìã RESULTADOS DEL AN√ÅLISIS:")
    print("-" * 40)
    print(f"üîå Corriente de cortocircuito (Isc): {Isc:.4f} A")
    print(f"‚ö° Voltaje de circuito abierto (Voc): {Voc:.4f} V")
    print(f"üîã Corriente en punto m√°x. potencia (Imp): {Imp:.4f} A")
    print(f"üîã Voltaje en punto m√°x. potencia (Vmp): {Vmp:.4f} V")
    print(f"‚ö° Potencia m√°xima (Pmax): {Pmp:.4f} W")
    print(f"üìä Factor de llenado (FF): {FF*100:.2f} %")
    if eta is not None:
        print(f"üåü Eficiencia (Œ∑): {eta*100:.2f} %")
        print(f"   üìù Condiciones: {irradiancia} W/m¬≤, √°rea: {area} m¬≤")
    else:
        print("‚ÑπÔ∏è  Eficiencia no calculada (falta irradiancia o √°rea)")
    print()
    
    resultados = {
        'Isc': Isc,
        'Voc': Voc,
        'Imp': Imp,
        'Vmp': Vmp,
        'Pmax': Pmp,
        'FF': FF,
        'Eficiencia': eta,
        'Voltajes': V,
        'Corrientes': I,
        'Potencias': P
    }
    
    # Exportar resultados a CSV
    print("üíæ Exportando resultados a CSV...")
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archivo_csv = f"resultados_celda_{timestamp}.csv"
    try:
        with open(archivo_csv, mode="w", newline="", encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow([f"An√°lisis de Celda Solar - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"])
            writer.writerow([])
            writer.writerow(["=== DATOS EXPERIMENTALES ==="])
            writer.writerow(["Voltaje (V)", "Corriente (A)", "Potencia (W)"])
            for v, i_val, p in zip(V, I, P):
                writer.writerow([f"{v:.4f}", f"{i_val:.4f}", f"{p:.4f}"])
            writer.writerow([])
            writer.writerow(["=== PAR√ÅMETROS CARACTER√çSTICOS ==="])
            writer.writerow(["Par√°metro", "Valor", "Unidad"])
            writer.writerow(["Corriente de cortocircuito (Isc)", f"{Isc:.4f}", "A"])
            writer.writerow(["Voltaje de circuito abierto (Voc)", f"{Voc:.4f}", "V"])
            writer.writerow(["Corriente m√°x. potencia (Imp)", f"{Imp:.4f}", "A"])
            writer.writerow(["Voltaje m√°x. potencia (Vmp)", f"{Vmp:.4f}", "V"])
            writer.writerow(["Potencia m√°xima (Pmax)", f"{Pmp:.4f}", "W"])
            writer.writerow(["Factor de llenado (FF)", f"{FF*100:.2f}", "%"])
            if eta is not None:
                writer.writerow(["Eficiencia (Œ∑)", f"{eta*100:.2f}", "%"])
                writer.writerow(["Irradiancia", f"{irradiancia}", "W/m¬≤"])
                writer.writerow(["√Årea de la celda", f"{area}", "m¬≤"])
        print(f"‚úÖ Resultados guardados en: {archivo_csv}")
    except Exception as e:
        print(f"‚ùå Error al guardar CSV: {e}")
        archivo_csv = "resultados_celda.csv"  # Fallback
    
    # Generar gr√°ficas
    print("üìà Generando gr√°ficas...")
    try:
        plt.style.use('default')
        plt.rcParams['font.size'] = 10
        plt.rcParams['axes.linewidth'] = 1.2
        plt.rcParams['grid.alpha'] = 0.3
    
        fig, ax = plt.subplots(1, 2, figsize=(14, 6))
        fig.suptitle(titulo, fontsize=16, fontweight='bold')
    
        # Gr√°fica I-V
        ax[0].plot(V, I, '-o', linewidth=2, markersize=6, label='Curva I-V', color='#2E86AB')
        ax[0].plot([Vmp], [Imp], 'ko', markersize=8, label=f'Pmax = {Pmp:.3f} W')
        ax[0].plot([0, Voc], [Isc, 0], 'r--', linewidth=2, alpha=0.7, label='Rect√°ngulo ideal')
        ax[0].plot([Vmp, Vmp], [0, Imp], 'k--', linewidth=1, alpha=0.5)
        ax[0].plot([0, Vmp], [Imp, Imp], 'k--', linewidth=1, alpha=0.5)
        ax[0].set_title("Curva Corriente-Voltaje (I-V)", fontweight='bold')
        ax[0].set_xlabel("Voltaje (V)")
        ax[0].set_ylabel("Corriente (A)")
        ax[0].grid(True, alpha=0.3)
        ax[0].legend(frameon=True, fancybox=True, shadow=True)
    
        if eta is not None and mostrar_eficiencia:
            ax[0].text(0.05 * Voc, 0.9 * Isc, f"Œ∑ = {eta*100:.2f}%", fontsize=12,
                       fontweight='bold', bbox=dict(boxstyle="round,pad=0.3", facecolor='lightblue', alpha=0.8))
    
        # Gr√°fica P-V
        ax[1].plot(V, P, '-o', linewidth=2, markersize=6, color='#A23B72', label='Curva P-V')
        ax[1].plot(Vmp, Pmp, 'ks', markersize=8, label=f'Pmax = {Pmp:.3f} W')
        ax[1].set_title("Curva Potencia-Voltaje (P-V)", fontweight='bold')
        ax[1].set_xlabel("Voltaje (V)")
        ax[1].set_ylabel("Potencia (W)")
        ax[1].grid(True, alpha=0.3)
        ax[1].legend(frameon=True, fancybox=True, shadow=True)
    
        plt.tight_layout()
        
        if guardar_imagen:
            timestamp_img = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_imagen = f"curvas_IV_PV_{timestamp_img}.png"
            plt.savefig(nombre_imagen, dpi=300, bbox_inches='tight')
            print(f"‚úÖ Gr√°ficas guardadas en: {nombre_imagen}")
    
        plt.show()
        
    except Exception as e:
        print(f"‚ùå Error al generar gr√°ficas: {e}")
    
    print("\nüéâ An√°lisis completado exitosamente!")
    return resultados


def cargar_datos_csv(archivo_csv):
    """
    Carga datos de voltaje y corriente desde un archivo CSV.
    
    El archivo CSV puede tener varios formatos:
    1. Dos columnas: Voltaje, Corriente
    2. Columnas con nombres: V, I, Voltage, Current, etc.
    3. Separadores: coma, punto y coma o tabulaci√≥n
    
    Par√°metros:
    -----------
    archivo_csv : str
        Ruta al archivo CSV con los datos
    
    Retorna:
    --------
    tuple : (voltajes, corrientes) como listas
    """
    if not os.path.exists(archivo_csv):
        raise FileNotFoundError(f"No se encontr√≥ el archivo: {archivo_csv}")
    
    print(f"üìÇ Cargando datos desde: {archivo_csv}")
    
    try:
        with open(archivo_csv, 'r', encoding='utf-8') as file:
            sample = file.read(1024)
            file.seek(0)
            separadores = [",", ";", "\t"]
            separador = max(separadores, key=lambda sep: sample.count(sep))
        
        try:
            df = pd.read_csv(archivo_csv, sep=separador)
            voltage_cols = ['V', 'Voltage', 'Voltaje', 'voltage', 'v', 'voltaje']
            current_cols = ['I', 'Current', 'Corriente', 'current', 'i', 'corriente']
    
            voltage_col, current_col = None, None
            for col in df.columns:
                col_clean = col.strip()
                if col_clean in voltage_cols or 'volt' in col_clean.lower():
                    voltage_col = col
                elif col_clean in current_cols or 'curr' in col_clean.lower() or 'amp' in col_clean.lower():
                    current_col = col
            
            if voltage_col is None or current_col is None:
                if len(df.columns) >= 2:
                    voltage_col, current_col = df.columns[0], df.columns[1]
                    print(f"‚ö†Ô∏è  Usando columnas por posici√≥n: '{voltage_col}' como voltaje, '{current_col}' como corriente")
                else:
                    raise ValueError("El archivo CSV debe tener al menos 2 columnas")
    
            voltajes = df[voltage_col].dropna().tolist()
            corrientes = df[current_col].dropna().tolist()
    
        except ImportError:
            voltajes, corrientes = [], []
            with open(archivo_csv, 'r', encoding='utf-8') as file:
                reader = csv.reader(file, delimiter=separador)
                primera_fila = next(reader, None)
                try:
                    float(primera_fila[0])
                    float(primera_fila[1])
                    voltajes.append(float(primera_fila[0]))
                    corrientes.append(float(primera_fila[1]))
                except (ValueError, IndexError):
                    pass
                for fila in reader:
                    if len(fila) >= 2:
                        try:
                            v = float(fila[0].replace(",", "."))
                            i = float(fila[1].replace(",", "."))
                            voltajes.append(v)
                            corrientes.append(i)
                        except ValueError:
                            continue
        
        if not voltajes or not corrientes:
            raise ValueError("No se pudieron cargar datos v√°lidos del archivo CSV")
        if len(voltajes) != len(corrientes):
            m = min(len(voltajes), len(corrientes))
            voltajes, corrientes = voltajes[:m], corrientes[:m]
            print(f"‚ö†Ô∏è  Ajustando longitud de arrays: {m} puntos")
    
        print(f"‚úÖ Datos cargados exitosamente: {len(voltajes)} puntos")
        print(f"   üìä Rango de voltaje: {min(voltajes):.3f} - {max(voltajes):.3f} V")
        print(f"   üìä Rango de corriente: {min(corrientes):.6f} - {max(corrientes):.6f} A")
    
        return voltajes, corrientes
        
    except Exception as e:
        raise ValueError(f"Error al leer el archivo CSV: {e}")


def crear_csv_ejemplo():
    """
    Crea un archivo CSV de ejemplo con datos t√≠picos de una celda solar.
    """
    archivo_ejemplo = "datos_ejemplo.csv"
    voltajes = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5]
    corrientes = [0.52, 0.51, 0.50, 0.48, 0.45, 0.41, 0.35, 0.27, 0.16, 0.08, 0.0]
    
    try:
        with open(archivo_ejemplo, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['Voltaje (V)', 'Corriente (A)'])
            for v, i in zip(voltajes, corrientes):
                writer.writerow([v, i])
        print(f"‚úÖ Archivo de ejemplo creado: {archivo_ejemplo}")
        return archivo_ejemplo
    except Exception as e:
        print(f"‚ùå Error al crear archivo de ejemplo: {e}")
        return None


def cargar_configuracion():
    """
    Carga la configuraci√≥n desde el archivo config.py.
    
    Retorna:
    --------
    dict : Diccionario con la configuraci√≥n cargada
    """
    try:
        usar_csv = getattr(config, 'usar_archivo_csv', False)
        voltajes, corrientes, fuente_datos = [], [], ""
    
        if usar_csv:
            archivo_csv = getattr(config, 'archivo_csv', 'datos_medidos.csv')
            try:
                if not os.path.exists(archivo_csv):
                    print(f"‚ö†Ô∏è  No se encontr√≥ el archivo: {archivo_csv}")
                    respuesta = input("üí° ¬øDeseas crear un archivo CSV de ejemplo? (s/n): ").lower().strip()
                    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
                        crear_csv_ejemplo()
                        print("‚úÖ Archivo de ejemplo creado: datos_ejemplo.csv")
                        print("üìù Puedes usar este archivo como plantilla o cambiar la ruta en config.py")
                        archivo_csv = "datos_ejemplo.csv"
                    else:
                        print("‚ùå No se puede continuar sin datos. Verifica config.py")
                        return None
                voltajes, corrientes = cargar_datos_csv(archivo_csv)
                fuente_datos = f"Archivo CSV: {archivo_csv}"
            except Exception as e:
                print(f"‚ùå Error al cargar archivo CSV: {e}")
                print("üí° Revisa el archivo y el formato, cambiando a datos directos de config.py...")
                usar_csv = False
    
        if not usar_csv:
            voltajes = getattr(config, 'voltajes', [])
            corrientes = getattr(config, 'corrientes', [])
            fuente_datos = "Datos directos (config.py)"
    
        configuracion = {
            'voltajes': voltajes,
            'corrientes': corrientes,
            'irradiancia': getattr(config, 'irradiancia', None),
            'area_celda': getattr(config, 'area_celda', None),
            'titulo_grafica': getattr(config, 'titulo_grafica', "An√°lisis de Celda Solar"),
            'mostrar_eficiencia': getattr(config, 'mostrar_eficiencia', True),
            'guardar_imagen': getattr(config, 'guardar_imagen', True),
            'fuente_datos': fuente_datos,
            'usar_csv': usar_csv
        }
    
        if len(voltajes) != len(corrientes):
            print(f"‚ùå Error: N√∫mero diferente de valores de voltaje ({len(voltajes)}) y corriente ({len(corrientes)})")
            return None
        if len(voltajes) < 3:
            print("‚ùå Error: Se necesitan al menos 3 puntos de datos para el an√°lisis")
            return None
    
        print(f"‚úÖ Configuraci√≥n cargada: {fuente_datos}")
        print(f"üìä Puntos de datos: {len(voltajes)}")
        print(f"üìà Rango de voltaje: {min(voltajes):.3f} - {max(voltajes):.3f} V")
        print(f"üìà Rango de corriente: {min(corrientes):.6f} - {max(corrientes):.6f} A")
    
        return configuracion
    except ImportError:
        print("‚ö†Ô∏è  No se encontr√≥ config.py, usando datos por defecto")
        return None
    except Exception as e:
        print(f"‚ùå Error al cargar configuraci√≥n: {e}")
        return None


def main():
    """
    Funci√≥n principal del programa.
    """
    print("üîã" + "="*58 + "üîã")
    print("   ANALIZADOR DE CELDAS SOLARES - ADRIANA RAZO DE LE√ìN")
    print("üîã" + "="*58 + "üîã\n")
    
    config_data = cargar_configuracion()
    
    if config_data and config_data['voltajes'] and config_data['corrientes']:
        fuente = config_data.get('fuente_datos', 'configuraci√≥n')
        print(f"üìÇ Usando datos de: {fuente}")
        resultados = analiza_celda(
            voltage=config_data['voltajes'],
            current=config_data['corrientes'],
            irradiancia=config_data['irradiancia'],
            area=config_data['area_celda'],
            titulo=config_data['titulo_grafica'],
            mostrar_eficiencia=config_data['mostrar_eficiencia'],
            guardar_imagen=config_data['guardar_imagen']
        )
    else:
        print("üìä Usando datos de ejemplo")
        print("üí° Para usar tus propios datos, modifica el archivo config.py\n")
        V_ejemplo = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]
        I_ejemplo = [0.5, 0.48, 0.45, 0.40, 0.30, 0.0]
    
        resultados = analiza_celda(
            voltage=V_ejemplo,
            current=I_ejemplo,
            irradiancia=1000,
            area=0.01,
            titulo="An√°lisis de Celda Solar (Datos de Ejemplo)"
        )
    
    print("\nüìù INFORMACI√ìN ADICIONAL:")
    print("-" * 40)
    print("‚Ä¢ Para usar datos CSV: cambia 'usar_archivo_csv = True' en config.py")
    print("‚Ä¢ Para datos directos: modifica los arrays en config.py")
    print("‚Ä¢ Los resultados se guardan autom√°ticamente en formato CSV")
    print("‚Ä¢ Las gr√°ficas se guardan como archivos PNG")
    print("‚Ä¢ Consulta el README.md para m√°s informaci√≥n")
    
    return resultados


if __name__ == "__main__":
    try:
        resultados = main()
        print("\n‚ú® ¬°Programa ejecutado exitosamente! ‚ú®")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Programa interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("üìû Si el problema persiste, consulta la documentaci√≥n o contacta soporte")
    finally:
        input("\nüîö Presiona Enter para salir...")
