"""
Analizador de Celdas Solares - An√°lisis de Curvas I-V y P-V
===========================================================

Este programa analiza datos experimentales de corriente y voltaje de celdas solares,
calculando par√°metros caracter√≠sticos y generando gr√°ficas de an√°lisis.

Creado por: Adriana Razo De Le√≥n
Proyecto: Celdas Solares
Versi√≥n: 2.0
Fecha: 2025

Funcionalidades:
- An√°lisis de curvas I-V y P-V
- C√°lculo de par√°metros caracter√≠sticos (Isc, Voc, Pmax, FF, Œ∑)
- Generaci√≥n de gr√°ficas profesionales
- Exportaci√≥n de resultados a CSV
- Configuraci√≥n f√°cil de datos de entrada

Uso:
    python graph_I_V.py

Dependencias:
    - numpy: C√°lculos num√©ricos
    - matplotlib: Generaci√≥n de gr√°ficas
    - scipy: Interpolaci√≥n de datos
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
import csv
import config
import os
import pandas as pd
from datetime import datetime


def analiza_celda(voltage, current, 
                  titulo="An√°lisis de Celda Solar", mostrar_eficiencia=True, 
                  guardar_imagen=True):
    """
    Analiza una celda solar a partir de datos de corriente y voltaje.
    Calcula par√°metros en unidades de mA/cm¬≤, mW/cm¬≤, etc., como en el notebook.
    Retorna resultados y las figuras de matplotlib.
    """
    if len(voltage) != len(current):
        raise ValueError("Los arrays de voltaje y corriente deben tener la misma longitud")
    if len(voltage) < 3:
        raise ValueError("Se requieren al menos 3 puntos de medici√≥n")

    # Convertir a arrays NumPy
    V = np.array(voltage, dtype=float)
    I = np.array(current, dtype=float)

    # --- C√°lculo de par√°metros al estilo del notebook ---
    # 1. Jsc (Densidad de corriente de cortocircuito): I(V=0)
    try:
        f_v = interpolate.interp1d(V, I, kind='linear', fill_value='extrapolate')
        Jsc = float(f_v(0.0))
    except Exception:
        Jsc = I[np.argmin(np.abs(V))]

    # 2. Voc (Voltaje de circuito abierto): V(I=0)
    try:
        f_i = interpolate.interp1d(I, V, kind='linear', fill_value='extrapolate')
        Voc = float(f_i(0.0))
    except Exception:
        Voc = V[np.argmax(V)]

    # 3. Pmax, Vmp, Imp (usar corriente absoluta para potencia √∫til)
    I_inver = -I  # Corriente invertida para que P sea positiva
    P = V * I_inver
    idx_max = np.argmax(P)
    Vmp = V[idx_max]
    Imp = I_inver[idx_max]
    Pmax = Vmp * Imp

    # 4. FF (Factor de llenado, %)
    if Jsc != 0 and Voc != 0:
        FF = (abs(Pmax)) / (abs(Jsc) * abs(Voc)) * 100
    else:
        FF = 0

    # 5. PCE relativa (sin √°rea ni irradiancia)
    PCE = abs(Jsc) * abs(Voc) * FF / 100

    # 6. Elimina c√°lculo de eficiencia absoluta, solo PCE relativa
    eficiencia = PCE  # PCE relativa (%)

    # Mostrar resultados
    print("=" * 50)
    print(f"üîã {titulo}")
    print("=" * 50)
    print(f"üìä Analizando {len(V)} puntos de medici√≥n...")
    print(f"üìÖ Fecha de an√°lisis: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    print("üìà PAR√ÅMETROS PRINCIPALES:")
    print(f"  ‚Ä¢ Jsc (Densidad de corriente cortocircuito): {Jsc:.4f} mA/cm¬≤")
    print(f"  ‚Ä¢ Voc (Voltaje circuito abierto): {Voc:.4f} V")
    print(f"  ‚Ä¢ Imp (Corriente m√°xima potencia): {Imp:.4f} mA/cm¬≤")
    print(f"  ‚Ä¢ Vmp (Voltaje m√°xima potencia): {Vmp:.4f} V")
    print(f"  ‚Ä¢ Pmax (Potencia m√°xima): {Pmax:.4f} mW/cm¬≤")
    print(f"  ‚Ä¢ FF (Factor de llenado): {FF:.2f}%")
    print(f"  ‚Ä¢ Œ∑ (Eficiencia/PCE relativa): {eficiencia:.2f}%")
    print()

    resultados = {
        'Jsc': abs(Jsc),
        'Voc': abs(Voc),
        'Imp': abs(Imp),
        'Vmp': abs(Vmp),
        'Pmax': abs(Pmax),
        'FF': FF,
        'Eficiencia': eficiencia,
        'Voltajes': V,
        'DensidadCorriente': I_inver,
        'Potencias': P
    }

    # Exportar resultados a CSV (opcional)
    print("üíæ Exportando resultados a CSV...")
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archivo_csv = f"resultados_celda_{timestamp}.csv"
    try:
        with open(archivo_csv, mode="w", newline="", encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow([f"An√°lisis de Celda Solar - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"])
            writer.writerow([])
            writer.writerow(["=== DATOS EXPERIMENTALES ==="])
            writer.writerow(["Voltaje (V)", "Corriente (A)", "Potencia (mW/cm¬≤)"])
            for v, i_val, p in zip(V, I, P):
                writer.writerow([f"{v:.4f}", f"{i_val:.4f}", f"{p:.4f}"])
            writer.writerow([])
            writer.writerow(["=== PAR√ÅMETROS CARACTER√çSTICOS ==="])
            writer.writerow(["Par√°metro", "Valor", "Unidad"])
            writer.writerow(["Densidad de corriente cortocircuito (Jsc)", f"{Jsc:.4f}", "mA/cm¬≤"])
            writer.writerow(["Voltaje de circuito abierto (Voc)", f"{Voc:.4f}", "V"])
            writer.writerow(["Corriente m√°x. potencia (Imp)", f"{Imp:.4f}", "mA/cm¬≤"])
            writer.writerow(["Voltaje m√°x. potencia (Vmp)", f"{Vmp:.4f}", "V"])
            writer.writerow(["Potencia m√°xima (Pmax)", f"{Pmax:.4f}", "mW/cm¬≤"])
            writer.writerow(["Factor de llenado (FF)", f"{FF:.2f}", "%"])
            writer.writerow(["Eficiencia (Œ∑)", f"{eficiencia:.2f}", "%"])
            # Elimina exportaci√≥n de irradiancia y √°rea
        print(f"‚úÖ Resultados guardados en: {archivo_csv}")
    except Exception as e:
        print(f"‚ùå Error al guardar CSV: {e}")
        archivo_csv = "resultados_celda.csv"  # Fallback

    # Generar figuras y retornarlas
    print("üìà Generando gr√°ficas (retornando objetos de figura)...")
    try:
        plt.style.use('default')
        plt.rcParams['font.size'] = 10
        plt.rcParams['axes.linewidth'] = 1.2
        plt.rcParams['grid.alpha'] = 0.3

        fig, ax = plt.subplots(1, 2, figsize=(14, 6))
        fig.suptitle(titulo, fontsize=16, fontweight='bold')

        # Gr√°fica I-V (Densidad de corriente)
        ax[0].plot(V, I_inver, '-o', linewidth=2, markersize=6, label='Curva I-V', color='#2E86AB')
        ax[0].plot([Vmp], [Imp], 'ko', markersize=8, label=f'Pmax = {Pmax:.3f} mW/cm¬≤')
        # Dibujar el rect√°ngulo FF en la gr√°fica I-V
        v0 = V[0]
        i0 = I_inver[0]
        rect_x = [v0, Vmp, Vmp, v0]
        rect_y = [i0, i0, Imp, Imp]
        ax[0].fill(rect_x, rect_y, color='orange', alpha=0.3, label='Rect√°ngulo FF')
        ax[0].plot([Vmp, Vmp], [0, Imp], 'k--', linewidth=1, alpha=0.5)
        ax[0].plot([0, Vmp], [Imp, Imp], 'k--', linewidth=1, alpha=0.5)
        ax[0].set_title("Curva Corriente-Voltaje (I-V)", fontweight='bold')
        ax[0].set_xlabel("Voltaje (V)")
        ax[0].set_ylabel("Densidad de corriente (mA/cm¬≤)")
        ax[0].grid(True, alpha=0.3)
        ax[0].legend(frameon=True, fancybox=True, shadow=True)
        ax[0].text(0.05 * Voc, 0.9 * Jsc, f"Œ∑ = {eficiencia:.2f}%", fontsize=12,
                fontweight='bold', bbox=dict(boxstyle="round,pad=0.3", facecolor='lightblue', alpha=0.8))

        # Gr√°fica P-V (Potencia por √°rea)
        ax[1].plot(V, P, '-o', linewidth=2, markersize=6, color='#A23B72', label='Curva P-V')
        ax[1].plot(Vmp, Pmax, 'ks', markersize=8, label=f'Pmax = {Pmax:.3f} mW/cm¬≤')
        ax[1].set_title("Curva Potencia-Voltaje (P-V)", fontweight='bold')
        ax[1].set_xlabel("Voltaje (V)")
        ax[1].set_ylabel("Potencia (mW/cm¬≤)")
        ax[1].grid(True, alpha=0.3)
        ax[1].legend(frameon=True, fancybox=True, shadow=True)

        plt.tight_layout()
        if guardar_imagen:
            nombre_archivo = titulo if titulo.endswith('.png') else "graph_I_V.png"
            fig.savefig(nombre_archivo, dpi=300)
            print(f"‚úÖ Gr√°fica guardada como: {nombre_archivo}")
        print("‚úÖ Figuras generadas y retornadas")
    except Exception as e:
        print(f"‚ùå Error al generar gr√°ficas: {e}")
        fig = None

    print("\nüéâ An√°lisis completado exitosamente!")
    return resultados, fig


def cargar_datos_csv(archivo_csv):
    """
    Carga datos de voltaje y corriente desde un archivo CSV/TSV con detecci√≥n autom√°tica de formato,
    manejo de comentarios y encabezados.
    """
    if not os.path.exists(archivo_csv):
        raise FileNotFoundError(f"No se encontr√≥ el archivo: {archivo_csv}")

    print(f"üìÇ Cargando datos desde: {archivo_csv}")

    try:
        # Leer primeras l√≠neas para detectar separador
        with open(archivo_csv, 'r', encoding='utf-8') as f:
            primeras_lineas = [f.readline() for _ in range(5)]

        # Detectar separador
        separador = '\t'  # Por defecto tabulaci√≥n como en 1368h.csv
        for linea in primeras_lineas:
            if '\t' in linea:
                separador = '\t'
                print("‚úÖ Formato detectado: Archivo separado por tabulaciones (TSV)")
                break
            elif ';' in linea:
                separador = ';'
                print("‚úÖ Formato detectado: CSV con punto y coma")
                break
            elif ',' in linea:
                separador = ','
                print("‚úÖ Formato detectado: CSV con comas")
                break

        # Leer archivo y extraer datos
        voltajes = []
        corrientes = []

        with open(archivo_csv, 'r', encoding='utf-8') as f:
            lineas = f.readlines()

            # Verificar si hay l√≠neas de comentario
            tiene_comentarios = any(linea.strip().startswith('//') for linea in lineas[:5])
            if tiene_comentarios:
                print("‚úÖ El archivo contiene l√≠neas de comentario")

            # Verificar si tiene encabezados
            tiene_encabezados = False
            for i, linea in enumerate(lineas):
                if not linea.strip().startswith('//'):
                    limpia = linea.strip().replace('"', '')
                    if 'voltaje' in limpia.lower() or 'corriente' in limpia.lower():
                        tiene_encabezados = True
                        print("‚úÖ El archivo contiene encabezados")
                    break

            # Procesar cada l√≠nea
            for i, linea in enumerate(lineas):
                # Saltar comentarios
                if linea.strip().startswith('//'):
                    continue

                # Limpiar l√≠nea (quitar comillas y espacios)
                linea_limpia = linea.strip().replace('"', '')

                # Saltar encabezados
                if i == 0 and tiene_encabezados and ('voltaje' in linea_limpia.lower() or 'corriente' in linea_limpia.lower()):
                    continue

                # Dividir seg√∫n el separador
                partes = linea_limpia.split(separador)

                # Extraer datos si hay al menos dos columnas
                if len(partes) >= 2:
                    try:
                        v = float(partes[0])
                        c = float(partes[1])
                        voltajes.append(v)
                        corrientes.append(c)
                    except ValueError:
                        # Probablemente encabezado o texto, ignorar
                        pass

        # Verificar que se hayan encontrado datos
        if voltajes and corrientes:
            print(f"‚úÖ Datos cargados: {len(voltajes)} puntos")
            print(f"üìä Rango voltaje: {min(voltajes):.3f} - {max(voltajes):.3f} V")
            print(f"üìä Rango corriente: {min(corrientes):.6f} - {max(corrientes):.6f} A")

            # Mostrar vista previa de los datos
            print("\nüìã Vista previa de los datos (primeros 5 puntos):")
            print("   Voltaje   |   Corriente")
            print("  -----------|-------------")
            for v, c in zip(voltajes[:5], corrientes[:5]):
                print(f"   {v:8.3f}  |   {c:8.3f}")
            if len(voltajes) > 5:
                print(f"   ... y {len(voltajes)-5} puntos m√°s")

            print("\nüéØ Archivo cargado exitosamente!")
            print("üëá Contin√∫a con el 'PASO 2'")
            return voltajes, corrientes
        else:
            print("‚ùå No se encontraron datos v√°lidos en el archivo")
            print("üí° Aseg√∫rate de que el archivo tenga el formato correcto")
            return [], []

    except Exception as e:
        print(f"‚ùå Error al procesar archivo: {e}")
        return [], []


def crear_csv_ejemplo():
    """
    Crea un archivo CSV de ejemplo con datos t√≠picos de una celda solar.
    """
    archivo_ejemplo = "datos_graph_I_V.csv"
    voltajes = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5]
    corrientes = [0.52, 0.51, 0.50, 0.48, 0.45, 0.41, 0.35, 0.27, 0.16, 0.08, 0.0]
    
    try:
        with open(archivo_ejemplo, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['Voltaje (V)', 'Corriente (A)'])
            for v, i in zip(voltajes, corrientes):
                writer.writerow([v, i])
        print(f"‚úÖ Archivo de ejemplo creado: {archivo_ejemplo}")
        return archivo_ejemplo
    except Exception as e:
        print(f"‚ùå Error al crear archivo de ejemplo: {e}")
        return None


def cargar_configuracion():
    """
    Carga la configuraci√≥n desde el archivo config.py.
    
    Retorna:
    --------
    dict : Diccionario con la configuraci√≥n cargada
    """
    try:
        usar_csv = getattr(config, 'usar_archivo_csv', False)
        voltajes, corrientes, fuente_datos = [], [], ""
    
        if usar_csv:
            archivo_csv = getattr(config, 'archivo_csv', 'datos_medidos.csv')
            try:
                if not os.path.exists(archivo_csv):
                    print(f"‚ö†Ô∏è  No se encontr√≥ el archivo: {archivo_csv}")
                    respuesta = input("üí° ¬øDeseas crear un archivo CSV de ejemplo? (s/n): ").lower().strip()
                    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
                        crear_csv_ejemplo()
                        print("‚úÖ Archivo de ejemplo creado: datos_graph_I_V.csv")
                        print("üìù Puedes usar este archivo como plantilla o cambiar la ruta en config.py")
                        archivo_csv = "datos_graph_I_V.csv"
                    else:
                        print("‚ùå No se puede continuar sin datos. Verifica config.py")
                        return None
                voltajes, corrientes = cargar_datos_csv(archivo_csv)
                fuente_datos = f"Archivo CSV: {archivo_csv}"
            except Exception as e:
                print(f"‚ùå Error al cargar archivo CSV: {e}")
                print("üí° Revisa el archivo y el formato, cambiando a datos directos de config.py...")
                usar_csv = False
    
        if not usar_csv:
            voltajes = getattr(config, 'voltajes', [])
            corrientes = getattr(config, 'corrientes', [])
            fuente_datos = "Datos directos (config.py)"
    
        configuracion = {
            'voltajes': voltajes,
            'corrientes': corrientes,
            # Elimina irradiancia y area_celda
            'titulo_grafica': getattr(config, 'titulo_grafica', "graph_I_V.png"),
            'mostrar_eficiencia': getattr(config, 'mostrar_eficiencia', True),
            'guardar_imagen': getattr(config, 'guardar_imagen', True),
            'fuente_datos': fuente_datos,
            'usar_csv': usar_csv
        }
    
        if len(voltajes) != len(corrientes):
            print(f"‚ùå Error: N√∫mero diferente de valores de voltaje ({len(voltajes)}) y corriente ({len(corrientes)})")
            return None
        if len(voltajes) < 3:
            print("‚ùå Error: Se necesitan al menos 3 puntos de datos para el an√°lisis")
            return None
    
        print(f"‚úÖ Configuraci√≥n cargada: {fuente_datos}")
        print(f"üìä Puntos de datos: {len(voltajes)}")
        print(f"üìà Rango de voltaje: {min(voltajes):.3f} - {max(voltajes):.3f} V")
        print(f"üìà Rango de corriente: {min(corrientes):.6f} - {max(corrientes):.6f} A")
    
        return configuracion
    except ImportError:
        print("‚ö†Ô∏è  No se encontr√≥ config.py, usando datos por defecto")
        return None
    except Exception as e:
        print(f"‚ùå Error al cargar configuraci√≥n: {e}")
        return None


def main():
    """
    Funci√≥n principal del programa.
    """
    print("üîã" + "="*58 + "üîã")
    print("   ANALIZADOR DE CELDAS SOLARES - ADRIANA RAZO DE LE√ìN")
    print("üîã" + "="*58 + "üîã\n")
    
    config_data = cargar_configuracion()
    
    if config_data and config_data['voltajes'] and config_data['corrientes']:
        fuente = config_data.get('fuente_datos', 'configuraci√≥n')
        print(f"üìÇ Usando datos de: {fuente}")
        resultados, _ = analiza_celda(
            voltage=config_data['voltajes'],
            current=config_data['corrientes'],
            titulo=config_data['titulo_grafica'],
            mostrar_eficiencia=config_data['mostrar_eficiencia'],
            guardar_imagen=config_data['guardar_imagen']
        )
    else:
        print("üìä Usando datos de ejemplo")
        print("üí° Para usar tus propios datos, modifica el archivo config.py\n")
        V_ejemplo = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]
        I_ejemplo = [0.5, 0.48, 0.45, 0.40, 0.30, 0.0]
    
        resultados, _ = analiza_celda(
            voltage=V_ejemplo,
            current=I_ejemplo,
            titulo="An√°lisis de Celda Solar (Datos de Ejemplo)"
        )
    
    print("\nüìù INFORMACI√ìN ADICIONAL:")
    print("-" * 40)
    print("‚Ä¢ Para usar datos CSV: cambia 'usar_archivo_csv = True' en config.py")
    print("‚Ä¢ Para datos directos: modifica los arrays en config.py")
    print("‚Ä¢ Los resultados se guardan autom√°ticamente en formato CSV")
    print("‚Ä¢ Las gr√°ficas se guardan como archivos PNG")
    print("‚Ä¢ Consulta el README.md para m√°s informaci√≥n")
    
    return resultados


if __name__ == "__main__":
    try:
        resultados = main()
        print("\n‚ú® ¬°Programa ejecutado exitosamente! ‚ú®")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Programa interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("üìû Si el problema persiste, consulta la documentaci√≥n o contacta soporte")
    finally:
        input("\nüîö Presiona Enter para salir...")
    print("‚Ä¢ Las gr√°ficas se guardan como archivos PNG")
    try:
        resultados = main()
        print("\n‚ú® ¬°Programa ejecutado exitosamente! ‚ú®")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Programa interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("üìû Si el problema persiste, consulta la documentaci√≥n o contacta soporte")
    finally:
        input("\nüîö Presiona Enter para salir...")
    print("‚Ä¢ Las gr√°ficas se guardan como archivos PNG")
    print("‚Ä¢ Consulta el README.md para m√°s informaci√≥n")
